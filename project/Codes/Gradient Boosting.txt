import pandas as pd

columns = ["mpg","cylinders","displacement","horsepower","weight","acceleration","model year","origin","car name"]
cars = pd.read_table("/content/auto-mpg,data.csv", delim_whitespace=True,names=columns)
print(cars.head(5))
from matplotlib import pyplot as plt

fig = plt.figure()
ax1 = fig.add_subplot(2,1,1)
ax2 = fig.add_subplot(2,1,2)
cars.plot('weight','mpg',kind='scatter',ax=ax1)
cars.plot('acceleration','mpg',kind='scatter',ax=ax2)
plt.show()
from sklearn.linear_model import LinearRegression

lr = LinearRegression()
lr.fit(cars[["weight"]].values, cars["mpg"])
predictions=lr.predict(cars[["weight"]])
plt.scatter(cars['weight'],cars['mpg'],c="red")
plt.scatter(cars['weight'],predictions,c='blue')
plt.show()
from sklearn.metrics import mean_squared_error as mean_sq_err

mse=mean_sq_err(cars['mpg'],predictions)
print("Mean Squared Error =",mse)
rmse = mse ** 0.5
print("Root Mean Squared Error = ", rmse)
filtered_cars = cars[cars["horsepower"] != '?']
filtered_cars['horsepower'] = filtered_cars['horsepower'].astype('float')
filtered_cars.plot('horsepower','mpg', kind='scatter',c='red')
filtered_cars.plot('weight','mpg', kind='scatter',c='blue')
plt.show()
lr = LinearRegression()
lr.fit(filtered_cars[['horsepower']],filtered_cars[['mpg']])
predictions = lr.predict(filtered_cars[['horsepower']])
plt.scatter(filtered_cars['horsepower'],predictions,c='blue')
plt.scatter(filtered_cars['horsepower'],filtered_cars['mpg'],c='red')
plt.show()
mse = mean_sq_err(predictions, filtered_cars['mpg'])
rmse = mse ** 0.5
print("Mean Square Error =",mse)
print("Root Mean Square Error =",rmse)
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.metrics import r2_score
from sklearn.model_selection import train_test_split

# Assuming filtered_cars dataset is ready
X = filtered_cars[['horsepower']]
y = filtered_cars['mpg']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the Gradient Boosting model
gb_regressor = GradientBoostingRegressor(n_estimators=100, random_state=42)
gb_regressor.fit(X_train, y_train)

# Make predictions
predictions = gb_regressor.predict(X_test)

# Calculate R^2 score
accuracy = r2_score(y_test, predictions)
print("Accuracy (R^2 score) =", accuracy)